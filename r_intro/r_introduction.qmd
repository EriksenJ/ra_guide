---
title: Introduction to R and the `data.table` package for Data Cleaning and Manipulation
date: last-modified
toc: true 
numbersections: true
mainfont: Times New Roman
monofont: Times New Roman
sansfont: Times New Roman
seriffont: Times New Roman
highlight-style: tango
fontsize: 10pt
geometry:  
    - margin=1in
---

```{r setup, include=FALSE}	
knitr::opts_chunk$set(
    echo = TRUE, 
    warning = FALSE,
    message = FALSE
    )
```

\clearpage 
# Introduction

This document supplements the suggested guides to getting started using R, `tidyverse` and `data.table` for data cleaning and manipulation in the [`RA guide`](https://github.com/EriksenJ/ra_guide). It can be used as a reference for how we typically use R to clean and manipulate data.

I recommend that you try to run the code in this document in your own R script. Remember to set the working directory. 


# Tasks 

## Simulate data 

We start by loading the `tidyverse` package to get access to piping and plotting functions. We then load the `data.table` package and simulate a dataset with firms observed in a given year. The data includes information on revenue, the number of employees, and whether the firm is located in a city or not. We also introduce some missing values in the revenue variable.

```{r}
# (Install and) load packages 
pacman::p_load(
    tidyverse, # for piping and plotting
    data.table, #for data wrangling 
    modelsummary # for summary statistics tables
    ) 

# Simulate some data
set.seed(123) # for reproducibility
n <- 1000 # number of firms
firm_data <- data.table(
  firm_id = 1:n,
  revenue = exp(rnorm(n, mean=8.8, sd=2)), # random revenue that is log-normal distributed
  employees = sample(20:1000, n, replace = TRUE), # random number of employees
  is_city = sample(c(TRUE, FALSE), n, replace = TRUE) # city or non-city
)

# Introduce missing values
firm_data[sample(n, 20), revenue := NA] # randomly assign NAs to revenue

# View the head and tail of the data.table containing the simulated data
firm_data
```


## Task: Replace missing values with mean 

Objective: Impute missing values with mean

```{r}
# show number of missing values 
firm_data[, sum(is.na(revenue))]

# impute missing revenue with mean from remaining firms (simple imputation)
nonna_mean_rev = mean(firm_data[!is.na(revenue), revenue])
nonna_mean_rev

firm_data[is.na(revenue), revenue := nonna_mean_rev] # impute missing revenue with mean

# show that update worked - no more missing values 
firm_data[, sum(is.na(revenue))]
```


## Task: Filtering Data 

Objective: Filter firms based on certain criteria.

```{r}
# Filtering firms with more than 50 employees
large_firms <- firm_data[employees > 50]

# Removing firms with anomalously high revenue (potential outliers)
firm_data <- firm_data[revenue < 200000]
```


## Task: Advanced Filtering

Objective: Use complex conditions to filter data.

```{r}
# Firms with revenue greater than the median and located in a city
high_revenue_city_firms <- firm_data[revenue > median(revenue) & is_city]
high_revenue_city_firms
```


## Task: Create new variables showing size and median revenue within size-group

```{r}
# Create a new indicator variable for large firms (empl > 250) 
firm_data[, large := fifelse(employees > 250, "Large", "Small")]

# Create a variable with median revenue by firm-size group 
firm_data[, median_revenue := median(revenue), by = large]

firm_data 
```


## Task: Aggregation and Grouped Operations

Objective: Calculate summary statistics for different groups.

```{r}
# Average revenue for firms in the city vs. outside the city
avg_revenue_by_location <- firm_data[, .(average_revenue = mean(revenue)), by = .(is_city)]
avg_revenue_by_location

# Counting the number of firms in each category
firm_count_by_location <- firm_data[, .N, by = .(is_city)]
firm_count_by_location 
```


## Task: Create crosstables

Objective: Create a contingency table showing the number of large/small firms by city/not city. 

```{r}
## simple table
firm_data[, table(large, is_city)]

## datasummary table 
datasummary_crosstab(
    large ~ is_city, 
    data = firm_data, 
    output = "markdown"
    )

## Adding another variable 
datasummary_crosstab(
    large * is_city ~ median_revenue, 
    data = firm_data, 
    output = "markdown"
)
```


## Task: Create correlation matrix for revenue and employees

Objective: Create a correlation matrix for revenue and employees.
```{r}	
# simple 
cor(firm_data[, .(revenue, employees)], use = "complete.obs")

# prettier and possible to save to latex table 
datasummary_correlation(
    data = firm_data[, .(revenue, employees)],
    format = "markdown"
    )

# Redo for all numeric variables 
datasummary_correlation(
    data = firm_data,
    format = "markdown"
    )
```


## Task: Create summary statistics table with modelsummary (by city/not city)

Objective: Create a summary statistics table with modelsummary (by city/not city).

```{r}	
pacman::p_load(modelsummary)

## markdown format 
datasummary(
    revenue + employees ~ Mean + SD + Median + NUnique,
    firm_data, 
    group = "is_city", 
    output = "markdown", 
    )

## add names to variables
datasummary(
    (`Revenue` = revenue) + (`Total employees` = employees) ~ Mean + (`Std.Dev.`= SD) + Median + (`Unique N`= NUnique),
    firm_data, 
    group = "is_city", 
    output = "markdown"
    )

## latex format 
tab = datasummary(
    (`Revenue` = revenue) + (`Total employees` = employees) ~ Mean + (`Std.Dev.`= SD) + Median + (`Unique N`= NUnique),
    firm_data, 
    group = "is_city", 
    output = "latex"
    )
tab


## Summary statistics by firm size group 
tab = datasummary(
    (Size = large) * ((`Revenue` = revenue) + (`Total employees` = employees)) ~ 
        Mean + (`Std.Dev.`= SD) + Median + (`Unique N`= NUnique),
    firm_data, 
    group = "is_city", 
    output = "latex"
    )
tab

## add footnote using kableExtra package 
pacman::p_load(kableExtra)

tab = datasummary(
    (Size = large) * ((`Revenue` = revenue) + (`Total employees` = employees)) ~ 
        Mean + (`Std.Dev.`= SD) + Median + (`Unique N`= NUnique),
    firm_data, 
    group = "is_city", 
    output = "latex",
    title = "Summary statistics by firm size group"
    ) %>%
    footnote(
        threeparttable = T, # add threeparttable environment to make the table footnote look great 
        general = "Note: The table is constructed from the full sample of firms.", 
        general_title = ""
        )
tab

## write table to file and include in a markdown (or LaTeX) document
tab %>% writeLines("summary_statistics.tex")
```

\input{summary_statistics.tex}

\clearpage
## Task: Joining Data

Objective: Merge the firm data with another dataset, such as industry classification.

Note: When `data.table` is loaded, the `merge()` function is overwritten. This means that we can use the `merge()` function from `data.table` instead of the `merge()` function from `base R`. The `merge()` function from `data.table` is faster and more flexible than the `merge()` function from `base R`.

```{r}
# Simulating an industry classification dataset
industry_data <- data.table(
    firm_id = 1:n, 
    industry = sample(c("Tech", "Retail", "Manufacturing"), n, replace = TRUE)
    )

# left join industry data onto firm_data, keeping all rows in firm_data
firm_data_left <- merge(firm_data, industry_data, on = "firm_id", all.x = T)
firm_data_left

# inner join industry data onto firm_data, keeping all shared rows
firm_data_inner <- merge(firm_data, industry_data, on = "firm_id")
firm_data_inner

# right join firm_data onto industry data, keeping all rows in firm_data
firm_data_right <- merge(firm_data, industry_data, on = "firm_id", all.y = T)
firm_data_right

firm_data = merge(firm_data, industry_data, on = "firm_id", all.x = T)
```


## Task: Data Export

Objective: Export the cleaned and manipulated data to a CSV and a parquet file.

```{r}
# Writing the final data to a CSV and parquet file
library(rio) # package to import() and export() almost any filetype
export(firm_data, file = "cleaned_firm_data.csv")
export(firm_data, file = "cleaned_firm_data.parquet") 
```


```{r, include = FALSE}
file.remove("cleaned_firm_data.csv")
file.remove("cleaned_firm_data.parquet")
```